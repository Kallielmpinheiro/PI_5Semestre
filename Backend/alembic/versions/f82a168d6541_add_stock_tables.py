"""add stock tables

Revision ID: f82a168d6541
Revises: deecd7d24d4d
Create Date: 2025-09-27 23:34:54.217560

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f82a168d6541'
down_revision: Union[str, Sequence[str], None] = 'deecd7d24d4d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('cpf', sa.String(length=11), nullable=False),
    sa.Column('mobile', sa.String(length=15), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cpf')
    )
    op.create_index('accounts_login_idx', 'profiles', ['cpf'], unique=False)
    op.create_table('stock_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('institution_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['institution_id'], ['institutions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('stock_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('stock_item_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['stock_item_id'], ['stock_items.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index(op.f('family_auth_accounts_account_id_idx'), table_name='family_authorized_accounts')
    op.drop_index(op.f('family_auth_accounts_family_id_idx'), table_name='family_authorized_accounts')
    op.drop_table('family_authorized_accounts')
    op.drop_index(op.f('family_closure_ancestor_depth_idx'), table_name='family_closure')
    op.drop_index(op.f('family_closure_ancestor_id_idx'), table_name='family_closure')
    op.drop_index(op.f('family_closure_descendant_depth_idx'), table_name='family_closure')
    op.drop_index(op.f('family_closure_descendant_id_idx'), table_name='family_closure')
    op.drop_table('family_closure')
    op.add_column('accounts', sa.Column('email', sa.String(length=255), nullable=False))
    op.drop_index(op.f('accounts_account_type_idx'), table_name='accounts')
    op.drop_index(op.f('accounts_active_idx'), table_name='accounts')
    op.drop_index(op.f('accounts_family_id_idx'), table_name='accounts')
    op.create_unique_constraint(None, 'accounts', ['email'])
    op.drop_constraint(op.f('accounts_family_id_fkey'), 'accounts', type_='foreignkey')
    op.drop_column('accounts', 'family_id')
    op.add_column('families', sa.Column('owner_id', sa.Integer(), nullable=False))
    op.add_column('families', sa.Column('proof_address_verificed', sa.Boolean(), nullable=False))
    op.add_column('families', sa.Column('membership_id', sa.Integer(), nullable=False))
    op.drop_index(op.f('families_active_idx'), table_name='families')
    op.drop_index(op.f('families_city_idx'), table_name='families')
    op.drop_index(op.f('families_cpf_idx'), table_name='families')
    op.drop_constraint(op.f('families_cpf_key'), 'families', type_='unique')
    op.drop_index(op.f('families_name_idx'), table_name='families')
    op.drop_index(op.f('families_proof_address_gin_idx'), table_name='families', postgresql_using='gin')
    op.drop_index(op.f('families_responsavel_id_idx'), table_name='families')
    op.drop_index(op.f('families_situation_type_idx'), table_name='families')
    op.create_unique_constraint(None, 'families', ['owner_id'])
    op.drop_constraint(op.f('families_responsavel_id_fkey'), 'families', type_='foreignkey')
    op.create_foreign_key(None, 'families', 'accounts', ['owner_id'], ['id'])
    op.create_foreign_key(None, 'families', 'institutions', ['membership_id'], ['id'])
    op.drop_column('families', 'active')
    op.drop_column('families', 'responsavel_id')
    op.drop_column('families', 'name')
    op.drop_column('families', 'mobile')
    op.drop_column('families', 'cpf')
    op.add_column('institutions', sa.Column('owner_id', sa.Integer(), nullable=False))
    op.drop_index(op.f('institutions_active_idx'), table_name='institutions')
    op.drop_index(op.f('institutions_type_idx'), table_name='institutions')
    op.create_unique_constraint(None, 'institutions', ['owner_id'])
    op.create_foreign_key(None, 'institutions', 'accounts', ['owner_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'institutions', type_='foreignkey')
    op.drop_constraint(None, 'institutions', type_='unique')
    op.create_index(op.f('institutions_type_idx'), 'institutions', ['institutions_type'], unique=False)
    op.create_index(op.f('institutions_active_idx'), 'institutions', ['active'], unique=False)
    op.drop_column('institutions', 'owner_id')
    op.add_column('families', sa.Column('cpf', sa.VARCHAR(length=11), autoincrement=False, nullable=False))
    op.add_column('families', sa.Column('mobile', sa.VARCHAR(length=15), autoincrement=False, nullable=False))
    op.add_column('families', sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=False))
    op.add_column('families', sa.Column('responsavel_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('families', sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'families', type_='foreignkey')
    op.drop_constraint(None, 'families', type_='foreignkey')
    op.create_foreign_key(op.f('families_responsavel_id_fkey'), 'families', 'accounts', ['responsavel_id'], ['id'], ondelete='RESTRICT')
    op.drop_constraint(None, 'families', type_='unique')
    op.create_index(op.f('families_situation_type_idx'), 'families', ['situation_type'], unique=False)
    op.create_index(op.f('families_responsavel_id_idx'), 'families', ['responsavel_id'], unique=False)
    op.create_index(op.f('families_proof_address_gin_idx'), 'families', ['proof_address'], unique=False, postgresql_using='gin')
    op.create_index(op.f('families_name_idx'), 'families', ['name'], unique=False)
    op.create_unique_constraint(op.f('families_cpf_key'), 'families', ['cpf'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('families_cpf_idx'), 'families', ['cpf'], unique=False)
    op.create_index(op.f('families_city_idx'), 'families', ['city'], unique=False)
    op.create_index(op.f('families_active_idx'), 'families', ['active'], unique=False)
    op.drop_column('families', 'membership_id')
    op.drop_column('families', 'proof_address_verificed')
    op.drop_column('families', 'owner_id')
    op.add_column('accounts', sa.Column('family_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('accounts_family_id_fkey'), 'accounts', 'families', ['family_id'], ['id'], ondelete='SET NULL')
    op.drop_constraint(None, 'accounts', type_='unique')
    op.create_index(op.f('accounts_family_id_idx'), 'accounts', ['family_id'], unique=False)
    op.create_index(op.f('accounts_active_idx'), 'accounts', ['active'], unique=False)
    op.create_index(op.f('accounts_account_type_idx'), 'accounts', ['account_type'], unique=False)
    op.drop_column('accounts', 'email')
    op.create_table('family_closure',
    sa.Column('ancestor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('descendant_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('depth', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['ancestor_id'], ['families.id'], name=op.f('family_closure_ancestor_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['descendant_id'], ['families.id'], name=op.f('family_closure_descendant_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('ancestor_id', 'descendant_id', name=op.f('family_closure_pkey'))
    )
    op.create_index(op.f('family_closure_descendant_id_idx'), 'family_closure', ['descendant_id'], unique=False)
    op.create_index(op.f('family_closure_descendant_depth_idx'), 'family_closure', ['descendant_id', 'depth'], unique=False)
    op.create_index(op.f('family_closure_ancestor_id_idx'), 'family_closure', ['ancestor_id'], unique=False)
    op.create_index(op.f('family_closure_ancestor_depth_idx'), 'family_closure', ['ancestor_id', 'depth'], unique=False)
    op.create_table('family_authorized_accounts',
    sa.Column('family_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('account_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('cpf', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('login', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('kinship', postgresql.ENUM('PARENTS', 'CHILDREN', 'SIBLINGS', 'SPOUSE', 'GRANDPARENTS', 'GRANDCHILDREN', 'UNCLES_AUNTS', 'NEPHEWS_NIECES', 'COUSINS', 'PARENTS_IN_LAW', 'CHILD_IN_LAW', 'SIBLINGS_IN_LAW', 'STEP_PARENTS', 'STEP_CHILDREN', 'GODPARENTS', 'GODCHILDREN', 'OTHER', name='kinshiptype'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], name=op.f('family_authorized_accounts_account_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['family_id'], ['families.id'], name=op.f('family_authorized_accounts_family_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('family_id', 'account_id', name=op.f('family_authorized_accounts_pkey'))
    )
    op.create_index(op.f('family_auth_accounts_family_id_idx'), 'family_authorized_accounts', ['family_id'], unique=False)
    op.create_index(op.f('family_auth_accounts_account_id_idx'), 'family_authorized_accounts', ['account_id'], unique=False)
    op.drop_table('stock_history')
    op.drop_table('stock_items')
    op.drop_index('accounts_login_idx', table_name='profiles')
    op.drop_table('profiles')
    # ### end Alembic commands ###
